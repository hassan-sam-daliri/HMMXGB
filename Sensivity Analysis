#Noise
import numpy as np
def add_noise(data, snr_db):


  signal_power = np.var(data)

  noise_power = signal_power / (10**(snr_db / 10))

  noise = np.random.normal(0, np.sqrt(noise_power), data.shape)

  noisy_data = data + noise

  return noisy_data

for column in data.columns:
  data[column] = add_noise(data[column], 20)

print(data)


######################################################
#Missing Value
import numpy as np

#  10% missing at random
def insert_missing(data, missing_rate=0.1, exclude_ends=3):

    data = data.copy()
    n = len(data)

    modifiable_indices = np.arange(exclude_ends, n - exclude_ends)
    num_modifiable_samples = len(modifiable_indices)

    if num_modifiable_samples <= 0:
        print(f"Warning: Not enough samples to insert missing values after excluding ends.")
        return data

    num_missing_to_insert = int(num_modifiable_samples * missing_rate)

    if num_missing_to_insert <= 0:
        print(f"Warning: Calculated number of missing values is zero.")
        return data

    missing_indices_relative = np.random.choice(
        num_modifiable_samples,
        num_missing_to_insert,
        replace=False
    )

    missing_indices_absolute = modifiable_indices[missing_indices_relative]

    data[missing_indices_absolute] = np.nan
    return data


all_columns = data.columns


num_columns_to_modify = int(len(all_columns) * 0.2)


columns_to_modify = np.random.choice(all_columns, num_columns_to_modify, replace=False)


for column in columns_to_modify:
  data[column] = insert_missing(data[column], missing_rate=0.1, exclude_ends=3)


print(data)
